import Head from 'next/head';
import React, { useState } from 'react';
import{CssBaseline,CircularProgress }from '@mui/material'
import styles from '@/styles/Home.module.css'
import { auth } from '../services/_config';
import { signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';
import { useRouter } from 'next/router';

export default function Home() {
  const router = useRouter()
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(''); 
  const [isLoading, setIsLoading] = useState(false);
  const [isSignUp, setIsSignUp] = useState(false); 

  const handleSignInOrSignUp = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      if (isSignUp) {
        await createUserWithEmailAndPassword(auth, email, password);
        router.push('/gallery')
        console.log('Sign-up successful');
        setSuccessMessage('Sign-up successful'); 

      } else {
        await signInWithEmailAndPassword(auth, email, password);
        router.push('/gallery')

        console.log('Sign-in successful');
        setSuccessMessage('Sign-in successful');

      }
    } catch (error) {
      if (error.code === 'invalid-login-credentials') {
        setError('Invalid email or password');
      }  else if (error.code === 'auth/email-already-in-use') {
        setError('Email is already in use. Please use a different email address.');
      } 
      else if (error.code === 'auth/invalid-email') {
        setError('Invalid email format. Please enter a valid email address.');
      }
      else if(error.code =='auth/weak-password'){
        setError('Weak-Password:Password should be at least 6 characters')
      }
      else if(error.code === 'auth/network-request-failed') {
        setError('Network error. Please check your internet connection.');
      }
      else {
        setError(error.message);
      }
    }
    finally {
      setIsLoading(false); 
    }
  };

  return (
    <>
      <Head>
        <title>Image Gallery</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     < CssBaseline/>
     <div  className={styles.container}>
      
     
      <div className={styles.form}>
        <h2>{isSignUp ? 'Sign Up' : 'Sign In'}</h2>
        {error&& <p className={styles.error}>{error}</p>}
        {successMessage && <p className={styles.success}>{successMessage}</p>}
        <form onSubmit={handleSignInOrSignUp}>
          <div className={styles.formGroup}>
            <label>Username:</label>
            <input
              type="email"
              value={email}
              placeholder='email'
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className={styles.formGroup}>
            <label>Password:</label>
            <input
            
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              
            />
            {/* {error && error.includes('weak-password') && (
              <p style={{ color: 'red' }}>{error}</p>
            )} */}
          </div>
          <button type="submit" className={styles.submitButton}>
          {isLoading ? (
                <CircularProgress size={20} color="inherit" /> 
              ) : (
                isSignUp ? 'Sign Up' : 'Sign In'
              )}
          </button>
        </form>
        <p>
          {isSignUp
            ? "Already have an account? "
            : "Don't have an account? "}
          <button className={styles.toggleButton}onClick={() => setIsSignUp(!isSignUp)}>
            {isSignUp ? 'Sign In' : 'Sign Up'}
          </button>
        </p>
      </div>
      </div>
    </>
  );
}
